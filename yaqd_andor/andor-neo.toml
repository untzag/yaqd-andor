protocol = "andor-neo"
doc = ""
traits = ["has-mapping", "has-measure-trigger", "is-sensor", "is-daemon"]

[links]
source = "https://gitlab.com/yaq/yaqd-andor"
bugtracker = "https://gitlab.com/yaq/yaqd-andor/-/issues"

[installation]
PyPI = "https://pypi.org/project/yaqd-andor"

[[types]]
type = "enum"
name = "preamp_gain_options"
symbols = [
    "12-bit (high well capacity)",
    "12-bit (low noise)",
    "16-bit (low noise and high well capacity)"
]

[[types]]
type = "enum"
name = "shuttering_modes"
symbols = ["rolling", "global"]


[config]

[config.spurious_noise_filter]
type = "boolean"
doc = "Corrects high value pixels using mean of surrounding pixels."
default = false

[config.static_blemish_correction]
type = "boolean"
default = false

[config.hbin]
type = "int"
doc = "Binning in the horizontal direction."
default = 1

[config.vbin]
type = "int"
doc = "Binning in the vertical direction."
default = 1

[config.aoi_width]
type = ["null", "int"]
doc = ""
default = "__null__"

[config.aoi_left]
type = ["null", "int"]
doc = "Specify left most coordinate."
default = "__null__"

[config.aoi_height]
type = ["null", "int"]
doc = ""
default = "__null__"

[config.aoi_top]
type = ["null", "int", "string"]
doc = "Specify top coordinate (units of pixels).  For vertical centering, use 'center'"
default = false

[config.electronic_shuttering_mode]
type = "shuttering_modes"
doc = "'rolling' or 'global'"
default = "rolling"

[config.simple_preamp_gain_control]
type = "preamp_gain_options"
default = "16-bit (low noise and high well capacity)"

[state]

[state.accumulate_count]
type = "int"
doc = "Number of images that should be summed to obtain each image."
default = 1

[state.exposure_time]
type = "float"
doc = "Requested Exposure time, in seconds."
default = 1

[messages]

[messages.get_heatsink_temperature]
response = "float"

[messages.get_pixel_height]

[messages.get_pixel_width]

[messages.get_sensor_temperature]

[messages.get_sensor_info]
doc = "Return a dictionary containing key information about the sensor."
response = {'type'= 'map', 'values'= 'string'}
