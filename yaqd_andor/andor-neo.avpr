{
    "config": {
        "aoi_binning": {
            "default": "1x1",
            "doc": "Option to bin pixels both horizontally and vertically. \\\n    Default is no binning (1x1).",
            "type": "binning_modes"
        },
        "aoi_height": {
            "default": null,
            "doc": "Specify the number of pixel rows to acquire. \\\n    Can be no larger than `sensor_height` - (`aoi_top` - 1). \\\n    Defaults to use all rows starting from `aoi_top`. \\\n    ",
            "type": [
                "null",
                "int"
            ]
        },
        "aoi_left": {
            "default": null,
            "doc": "Specify left-most pixel column of the AOI. \\\n    Defaults to the full left of the camera sensor (column 1). \\\n    ",
            "type": [
                "null",
                "int"
            ]
        },
        "aoi_top": {
            "default": null,
            "doc": "Specify the top-most pixel row of the AOI. \\\n    Defaults to the top of the camera sensor (1). \\\n    ",
            "type": [
                "null",
                "int"
            ]
        },
        "aoi_width": {
            "default": null,
            "doc": "Specify the number of pixel columns to acquire. \\\n    Can be no larger than `sensor_width` - (`aoi_left` - 1). \\\n    Defaults to use all columns starting from `aoi_left`. \\\n    ",
            "type": [
                "null",
                "int"
            ]
        },
        "electronic_shuttering_mode": {
            "default": "Rolling",
            "doc": "'Rolling' or 'Global'",
            "type": "shuttering_modes"
        },
        "enable": {
            "default": true,
            "doc": "Disable this daemon. The kind entry-point will not attempt to start this daemon.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "exposure_time": {
            "default": 1,
            "doc": "Camera exposure time (seconds).",
            "type": "float"
        },
        "log_level": {
            "default": "info",
            "doc": "Set daemon log-level.",
            "origin": "is-daemon",
            "type": {
                "name": "level",
                "symbols": [
                    "debug",
                    "info",
                    "notice",
                    "warning",
                    "error",
                    "critical",
                    "alert",
                    "emergency"
                ],
                "type": "enum"
            }
        },
        "log_to_file": {
            "default": false,
            "doc": "Optionally force logging to a file.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "loop_at_startup": {
            "default": false,
            "doc": "If set to true, the daemon will begin to loop measure as soon as it starts.",
            "origin": "has-measure-trigger",
            "type": "boolean"
        },
        "make": {
            "default": "andor",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "model": {
            "default": "neo",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "origin": "is-daemon",
            "type": "int"
        },
        "sensor_cooling": {
            "default": false,
            "doc": "Set whether or not sensor will be cooled.",
            "type": "boolean"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "simple_preamp_gain_control": {
            "default": "16-bit (low noise & high well capacity)",
            "type": "preamp_gain_options"
        },
        "spurious_noise_filter": {
            "default": false,
            "doc": "Corrects high value pixels using mean of surrounding pixels.",
            "type": "boolean"
        },
        "static_blemish_correction": {
            "default": false,
            "type": "boolean"
        }
    },
    "doc": "",
    "installation": {
        "PyPI": "https://pypi.org/project/yaqd-andor"
    },
    "links": {
        "bugtracker": "https://gitlab.com/yaq/yaqd-andor/-/issues",
        "source": "https://gitlab.com/yaq/yaqd-andor"
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "origin": "is-daemon",
            "request": [],
            "response": "boolean"
        },
        "get_channel_mappings": {
            "doc": "Defines which mapping keys apply to which channel keys. Each channel may have zero or many mappings. Mappings must broadcast into corresponding channels.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "string",
                    "type": "array"
                }
            }
        },
        "get_channel_names": {
            "doc": "Get current channel names.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "items": "string",
                "type": "array"
            }
        },
        "get_channel_shapes": {
            "doc": "Get current channel shapes. If list is empty, channel is scalar.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "int",
                    "type": "array"
                }
            }
        },
        "get_channel_units": {
            "doc": "Get current channel units.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_feature_names": {
            "doc": "Return a list of available SDK features. \\\n    Different camera types have different available features. \\\n    All features names are snake case (e.g. `sensor_temperature`), \\\n    distinct from Pascal case (e.g. SensorTemperature) of the direct SDK. \\\n    ",
            "request": [],
            "response": {
                "items": "string",
                "type": "array"
            }
        },
        "get_feature_options": {
            "doc": "Return enumerated options for specified feature name (snake case). \\\n    If specified feature is not type `enum`, raises error.",
            "request": [
                {
                    "name": "feature_name",
                    "type": "string"
                }
            ],
            "response": {
                "items": "string",
                "type": "array"
            }
        },
        "get_feature_value": {
            "doc": "Reads the current value for the specified (snake case) feature name.",
            "request": [
                {
                    "name": "feature_name",
                    "type": "string"
                }
            ],
            "response": [
                "string",
                "int",
                "float",
                "boolean"
            ]
        },
        "get_mapping_id": {
            "doc": "Mapping ID. This integer increments every time the mapping is updated. Clients can safely check this id to verify that their cached mappings are correct, if desired.",
            "origin": "has-mapping",
            "request": [],
            "response": "int"
        },
        "get_mapping_units": {
            "doc": "Must return units for every mapping. Units can be null.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_mappings": {
            "doc": "Mappings themselves.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "ndarray",
                    "double"
                ]
            }
        },
        "get_measured": {
            "doc": "Returns map of channel_name to measured_value. Always returns additional key measurement_id.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "double",
                    "ndarray",
                    "int"
                ]
            }
        },
        "get_measurement_id": {
            "doc": "Get current measurement_id. Clients are encouraged to watch for this to be updated before calling get_measured to get entire measurement.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "int"
            }
        },
        "get_sensor_info": {
            "doc": "Return a dictionary containing information about the sensor.",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "int",
                    "float"
                ]
            }
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "origin": "is-daemon",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "measure": {
            "doc": "Initiate a measurement. Returns integer, measurement ID.",
            "origin": "has-measure-trigger",
            "request": [
                {
                    "default": false,
                    "name": "loop",
                    "type": "boolean"
                }
            ],
            "response": "int"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "origin": "is-daemon",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        },
        "stop_looping": {
            "doc": "Stop looping measurement.",
            "origin": "has-measure-trigger",
            "request": [],
            "response": "null"
        }
    },
    "protocol": "andor-neo",
    "requires": [],
    "traits": [
        "has-mapping",
        "has-measure-trigger",
        "is-daemon",
        "is-sensor"
    ],
    "types": [
        {
            "name": "preamp_gain_options",
            "symbols": [
                "12-bit (high well capacity)",
                "12-bit (low noise)",
                "16-bit (low noise & high well capacity)"
            ],
            "type": "enum"
        },
        {
            "name": "shuttering_modes",
            "symbols": [
                "Rolling",
                "Global"
            ],
            "type": "enum"
        },
        {
            "name": "binning_modes",
            "symbols": [
                "1x1",
                "2x2",
                "3x3",
                "4x4",
                "8x8"
            ],
            "type": "enum"
        },
        {
            "fields": [
                {
                    "name": "shape",
                    "type": {
                        "items": "int",
                        "type": "array"
                    }
                },
                {
                    "name": "typestr",
                    "type": "string"
                },
                {
                    "name": "data",
                    "type": "bytes"
                },
                {
                    "name": "version",
                    "type": "int"
                }
            ],
            "logicalType": "ndarray",
            "name": "ndarray",
            "type": "record"
        }
    ]
}