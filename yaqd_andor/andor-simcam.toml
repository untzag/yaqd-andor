protocol = "andor-simcam"
doc = ""
traits = ["has-mapping", "has-measure-trigger", "is-sensor", "is-daemon"]

[links]
source = "https://gitlab.com/yaq/yaqd-andor"
bugtracker = "https://gitlab.com/yaq/yaqd-andor/-/issues"

[installation]
PyPI = "https://pypi.org/project/yaqd-andor"

[[types]]
type = "enum"
name = "shuttering_modes"
symbols = ["rolling", "global"]


[config]
[config.make]
default = "andor"

[config.model]
default = "simcam"

[config.aoi_hbin]
type = "int"
default = 1

[config.aoi_vbin]
type = "int"
default = 1

[config.aoi_width]
type = ["null", "int"]
doc = """Specify width of AOI, in units of super-pixels. \\
    Defaults to the full width of sensor.
    """
default = "__null__"

[config.aoi_left]
type = ["null", "int"]
doc = """Specify left most coordinate of AOI. \\
    Defaults to the full left of the sensor (1). \\
    Units of pixels. \\
    """
default = "__null__"

[config.aoi_height]
type = ["null", "int"]
doc = """Specify the pixel height. \\
    Can be no larger than sensor_height - (aoi_top - 1). \\
    Default is the full height of camera. \\
    Units of super-pixels. \\
    """
default = "__null__"

[config.aoi_top]
type = ["null", "int"]
doc = """Specify top coordinate (units of pixels). \\
    Defaults to the top of the camera sensor (1). \\
    Units of pixels. \\
    """
default = "__null__"

[config.electronic_shuttering_mode]
type = "shuttering_modes"
doc = "'rolling' or 'global'"
default = "rolling"

[config.exposure_time]
type = "float"
doc = "Requested Exposure time, in seconds."
default = 1

[state]

[messages]

[messages.get_sensor_info]
doc = "Return a dictionary containing information about the sensor."
response = {'type'= 'map', 'values'= ["int", "float"]}

[messages.get_feature_names]
doc = """Return a list of available SDK features. \\
    Different camera types have different available features. \\
    All features names are snake case (e.g. `sensor_temperature`), \\
    distinct from Pascal case (e.g. SensorTemperature) of the direct SDK. \\
    """
response = {"type"='array', "items"="string"}

[messages.get_feature_value]
doc = "Reads the current value for the specified (snake case) feature name."
request = [{"name"="feature_name", "type"="string"}]
response = ["string", "int", "float", "boolean"]

[messages.get_feature_options]
doc = """Return enumerated options for specified feature name (snake case). \\
    If specified feature is not type `enum`, raises error."""
request = [{"name"="feature_name", "type"="string"}]
response = {"type"="array", "items"="string"}
